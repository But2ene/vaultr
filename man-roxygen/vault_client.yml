api:
  short: >-
    Returns an api client object that can be used to directly interact
    with the vault server.

read:
  short: >-
    Read a value from the vault.  This can be used to read any value
    that you have permission to read, and can also be used as an
    interface to a version 1 key-value store (see
    \code{\link{vault_client_kv1}}.  Similar to the vault CLI command
    \code{vault read}.
  params:
    path: >-
      Path for the secret to read, such as \code{/secret/mysecret}
    field: >-
      Optional field to read from the secret.  Each secret is stored
      as a key/value set (represented in R as a named list) and this
      is equivalent to using \code{[[field]]} on the return value.
      The default, \code{NULL}, returns the full set of values.
    metadata: >-
      Logical, indicating if we should return metadata for this secret
      (lease information etc) as an attribute along with hte values
      itself.  Ignored if \code{field} is specified.

write:
  short: >-
    Write data into the vault.  This can be used to write any value
    that you have permission to write, and can also be used as an
    interface to a version 1 key-value store (see
    \code{\link{vault_client_kv1}}.  Similar to the vault CLI command
    \code{vault write}.
  params:
    path: >-
      Path for the secret to write, such as \code{/secret/mysecret}
    data: >-
        A named list of values to write into the vault at this path.
        This \emph{replaces} any existing values.

list:
  short: >-
    List data in the vault at a given path.  This can be used to list
    keys, etc (e.g., at \code{/secret}).
  params:
    path: The path to list
    full_names: >-
      Logical, indicating if full paths (relative to the vault root)
      should be returned.
  value: >-
    A character vector (of zero length if no keys are found).  Paths
    that are "directories" (i.e., that contain keys and could
    themselves be listed) will be returned with a trailing forward
    slash, e.g. \code{path/}

delete:
  short: >-
    Delete a value from the vault
  params:
    path: The path to delete

# TODO: this will need expanding once the relevant secret engines have
# been added, at least to provide links.
login:
  short: >-
    Login to the vault.  This method is more complicated than most.
  params:
    ...: >-
      Additional named parameters passed through to the underlying method
    method: >-
      Authentication method to use, as a string.  Supported values
      include \code{token} (the default), \code{github},
      \code{approle} and \code{userpass}.
    mount: >-
      The mount path for the authentication backend, \emph{if it has
      been mounted in a nonstandard location}.  If not given, then it
      is assumed that the backend was mounted at a path corresponding
      to the method name.
    renew: >-
      Login, even if we appear to hold a valid token.  If \code{FALSE}
      and we have a token then \code{login} does nothing.
    quiet: >-
      Suppress some informational messages
    token_only: >-
      Logical, indicating that we do not want to actually log in, but
      instead just generate a token and return that.  IF given then
      \code{renew} is ignored and we always generate a new token.
    use_cache: >-
      Logical, indicating if we should look in the session cache for a
      token for this client.  If this is \code{TRUE} then when we log
      in we save a copy of the token for this session and any
      subsequent calls to \code{login} at this vault address that use
      \code{use_cache = TRUE} will be able to use this token.  Using
      cached tokens will make using some authentication backends that
      require authentication with external resources (e.g.,
      \code{github}) much faster.

status:
  short: >-
    Return the status of the vault server, including whether it is
    sealed or not, and the vault server version.
