custom_mount:
  short: >-
    Set up a \code{vault_client_auth_github} object at a custom mount.
    For example, suppose you mounted the \code{github} authentication
    backend at \code{/github-myorg} you might use \code{gh <-
    vault$auth$github2$custom_mount("/github-myorg")} - this pattern
    is repeated for other secret and authentication backends.
  params:
    mount: String, indicating the path that the engine is mounted at.

configure:
  short: >-
    Configures the connection parameters for GitHub-based authentication.
  params:
    organization: >-
      The organization users must be part of (note American spelling).
    base_url: >-
      The API endpoint to use. Useful if you are running GitHub
      Enterprise or an API-compatible authentication server.
    ttl: >-
      Duration after which authentication will be expired
    max_ttl: >-
      Maximum duration after which authentication will be expired

configuration:
  short: >-
    Reads the connection parameters for GitHub-based authentication.

write:
  short: >-
    Write a mapping between a GitHub team or user and a set of vault
    policies.
  params:
    team_name: >-
      String, with the GitHub team name
    policies: >-
      A character vector of vault policies that this user or team will
      have for vault access if they match this team or user.
    user: &user >-
      Scalar logical - if \code{TRUE}, then \code{team_name} is
      interpreted as a \emph{user} instead.

read:
  short: >-
    Write a mapping between a GitHub team or user and a set of vault
    policies.
  params:
    team_name: >-
      String, with the GitHub team name
    user: *user

login:
  short: >-
    Log into the vault using GitHub authentication.  Normally you
    would not call this directly but instead use \code{$login} with
    \code{method = "github"} and proving the \code{token} argument.
    This function returns a vault token but does not set it as the
    client token.
  params:
    token: A GitHub token to authenticate with.
