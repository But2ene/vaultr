config:
  short: >-
    Fetch the configuration for this \code{kv2} store.  Returns a
    named list of values, the contents of which will depend on the
    vault version.
  params:
    mount: &mount
      Custom mount path to use for this store (see \code{Details}.

custom_mount:
  short: >-
    Set up a \code{vault_client_kv2} object at a custom mount.  For
    example, suppose you mounted another copy of the \code{kv2} secret
    backend at \code{/secret2} you might use \code{kv <-
    vault$secrets$kv2$custom_mount("/secret2")} - this pattern is repeated for
    other secret and authentication backends.
  params:
    mount: String, indicating the path that the engine is mounted at.

delete:
  short: >-
    Delete a secret from the vault.  This marks the version as deleted
    and will stop it from being returned from reads, but the
    underlying data will not be removed. A delete can be undone using
    the undelete method.
  params:
    path: >-
      Path to delete
    version: >-
      Optional version to delete.  If \code{NULL} (the default) then
      the latest version of the secret is deleted.  Otherwise,
      \code{version} can be a vector of integer versions to delete.
    mount: *mount

destroy:
  short: >-
    Delete a secret entirely.  Unlike \code{delete} this operation is
    irreversible and is more like the \code{delete} operation on
    \code{\link{vault_client_kv1}} stores.
  params:
    path: >-
      Path to delete
    version: >-
      Version numbers to delete, as a vector of integers (this is
      required)
    mount: *mount

get:
  short: >-
    Read a secret from the vault
  params:
    path: Path of the secret to read
    version: >-
      Optional version of the secret to read.  If \code{NULL} (the
      default) then the most recent version is read.  Otherwise this
      must be a scalar integer.
    field: >-
      Optional field to read from the secret.  Each secret is stored
      as a key/value set (represented in R as a named list) and this
      is equivalent to using \code{[[field]]} on the return value.
      The default, \code{NULL}, returns the full set of values.
    metadata: >-
      Logical, indicating if we should return metadata for this secret
      (lease information etc) as an attribute along with the values
      itself.  Ignored if \code{field} is specified.
    mount: *mount

list:
  short: >-
    List data in the vault at a give path.  This can be used to list
    keys, etc (e.g., at \code{/secret}).
  params:
    path: The path to list
    full_names: >-
      Logical, indicating if full paths (relative to the vault root)
      should be returned.
    mount: *mount
  value: >-
    A character vector (of zero length if no keys are found).  Paths
    that are "directories" (i.e., that contain keys and could
    themselves be listed) will be returned with a trailing forward
    slash, e.g. \code{path/}

metadata_get:
  short: Read secret metadata and versions at the specified path
  params:
    path: Path of secret to read metadata for
    mount: *mount

metadata_put:
  short: >-
    Update metadata for a secret.  This is allowed even if a secret
    does not yet exist, though this requires the \code{create} vault
    permission at this path.
  params:
    path: Path of secret to update metadata for
    cas_required: >-
      Logical, indicating that if If true the key will require the cas
      parameter to be set on all write requests (see \code{put}). If
      \code{FALSE}, the backend's configuration will be used.
    max_versions: >-
      Integer, indicating the maximum number of versions to keep per
      key.  If not set, the backend's configured max version is
      used. Once a key has more than the configured allowed versions
      the oldest version will be permanently deleted.
    mount: *mount

metadata_delete:
  short: >-
    This method permanently deletes the key metadata and all version
    data for the specified key. All version history will be removed.
  params:
    path: Path to delete
    mount: *mount

put:
  short: >-
    Create or update a secret in this store.
  params:
    path: >-
      Path for the secret to write, such as \code{/secret/mysecret}
    data: >-
        A named list of values to write into the vault at this path.
    cas: >-
      Integer, indicating the "cas" value to use a "Check-And-Set"
      operation. If not set the write will be allowed. If set to 0 a
      write will only be allowed if the key doesn't exist. If the
      index is non-zero the write will only be allowed if the key's
      current version matches the version specified in the cas
      parameter.
    mount: *mount

undelete:
  short: >-
    Undeletes the data for the provided version and path in the
    key-value store. This restores the data, allowing it to be
    returned on get requests.  This works with data deleted with
    \code{$delete} but not with \code{$destroy}.
  params:
    path: The path to undelete
    version: Integer vector of versions to undelete
    mount: *mount
